-- SQL Query Explanation & Optimization Engine
-- Database seed file for development and testing
--
-- This file contains placeholder schema and sample data
-- for testing SQL analysis and optimization features.
--
-- TODO: Add actual schema definitions in Phase 2
-- TODO: Add sample data for testing
-- TODO: Add indexes for performance testing
-- TODO: Add views for complex query testing

-- Placeholder schema - to be implemented in Phase 2
-- CREATE TABLE users (
--     id SERIAL PRIMARY KEY,
--     username VARCHAR(50) UNIQUE NOT NULL,
--     email VARCHAR(100) UNIQUE NOT NULL,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );
--
-- CREATE TABLE orders (
--     id SERIAL PRIMARY KEY,
--     user_id INTEGER REFERENCES users(id),
--     amount DECIMAL(10,2) NOT NULL,
--     status VARCHAR(20) DEFAULT 'pending',
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );
--
-- CREATE TABLE products (
--     id SERIAL PRIMARY KEY,
--     name VARCHAR(100) NOT NULL,
--     price DECIMAL(10,2) NOT NULL,
--     category VARCHAR(50),
--     stock_quantity INTEGER DEFAULT 0
-- );
--
-- CREATE TABLE order_items (
--     id SERIAL PRIMARY KEY,
--     order_id INTEGER REFERENCES orders(id),
--     product_id INTEGER REFERENCES products(id),
--     quantity INTEGER NOT NULL,
--     unit_price DECIMAL(10,2) NOT NULL
-- );

-- Sample queries for testing (to be used in Phase 1+)
-- SELECT u.username, COUNT(o.id) as order_count, SUM(o.amount) as total_spent
-- FROM users u
-- LEFT JOIN orders o ON u.id = o.user_id
-- WHERE o.created_at >= '2024-01-01'
-- GROUP BY u.id, u.username
-- HAVING COUNT(o.id) > 0
-- ORDER BY total_spent DESC;

-- SELECT p.name, p.category, AVG(oi.unit_price) as avg_sale_price
-- FROM products p
-- JOIN order_items oi ON p.id = oi.product_id
-- JOIN orders o ON oi.order_id = o.id
-- WHERE o.status = 'completed'
-- GROUP BY p.id, p.name, p.category
-- ORDER BY avg_sale_price DESC;
